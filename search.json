[{"title":"WSL+HEXO+Github 搭建个人博客","date":"2021-01-17T14:00:00.000Z","url":"/2021/01/17/13.WSL+HEXO+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","tags":[["Linux","/tags/Linux/"],["WSL","/tags/WSL/"]],"categories":[["undefined",""]],"content":"安装依赖 安装 git： 安装 Node.js： 为 npm 更换国内源： 验证： 安装 Hexo： 安装 Hexo-git 部署插件： 创建博客 创建一个文件夹来存放你的博客。 在博客文件夹路径执行以下语句初始化： 配置 SSH key 在 ~/.ssh/id_rsa.pub 生成公钥文件： 连续三次回车即可创建。 找到公钥文件，打开并复制里面的内容，在 GitHub个人设置 -&gt; SSH and GPG keys -&gt; New SSH key 中粘贴。 测试是否成功： 回复 yes 后看到以下内容说明配置成功： Hi XXX! You’ve successfully authenticated, but GitHub does not provide shell access. 设置用户名和邮箱： 注：GitHub 必须存在一个以自己用户名为名的仓库。 更改配置文件在站点配置文件中找到有关 deploy 的部分： hexo 的简单使用"},{"title":"BIOS与引导","date":"2021-01-10T14:00:00.000Z","url":"/2021/01/10/12BIOS%E4%B8%8E%E5%BC%95%E5%AF%BC/","tags":[["引导","/tags/%E5%BC%95%E5%AF%BC/"]],"categories":[["undefined",""]],"content":"BIOS BIOS（英文：Basic Input/Output System），即基本输入输出系统。BIOS预安装在个人电脑的主板上，是个人电脑启动时加载的第一个软件。 BIOS 设置存放在 CMOS 中。CMOS 是主板中存储 BIOS 设置的一块芯片，由于该芯片采用 CMOS 技术制成，因此也叫做 CMOS。 BIOS的引导方式分为两种：一种为传统的引导方式，即 Legacy 型，另一种为 UEFI 型引导，它们直接的区别我们在下文会提到。 引导 引导过程包括如下几个粗略的任务： 查找、载入并执行引导代码； 查找、载入并执行操作系统内核； 运行启动脚本和系统守护进程； 维护进程卫生，管理系统状态变化。此项任务会一直持续到系统关闭。 查找、载入并执行引导代码 系统上电后，CPU 会固定执行一段存储在 ROM 中的引导代码。 BIOS 侦测硬件和硬盘并执行一些简单的健康检查。 BIOS 根据硬件的启动顺序查找下一阶段的引导代码，启动顺序可以在 BIOS 设置中更改。 如果使用传统 BIOS： 传统 BIOS 认为引导设备是以主引导记录（Master Boot Record，MBR）作为起始。 MBR 包括第二阶段的引导装载程序和一个原始的磁盘分区表。因此，BIOS 会按照在引导设备中找到 MBR 分区表，识别出磁盘的活动分区，读取并执行位于活动分区起始位置的第二阶段的引导装载程序。 如果使用 UEFI 型引导： UEFI（Unified Extensible Firmware Interface，“统一可扩展固件接口”）GUID（globally unique identifier，“全局唯一标识符”）GPT（GUID Partition Table，“GUID 分区表”）FAT（File Allocation Table，“文件分配表”）ESP（EFI System Partition，“EFI 系统分区”）4. UEFI 规范中包含了一个叫 GPT 的现代磁盘分区方案，能够理解 FAT 文件系统。因此，BIOS 会在引导设备中找到并查询 GPT 分区表来识别 ESP，然后在 ESP 中的文件里直接读取并执行配置好的目标应用。 之后我们暂不讨论 Windows，只对 GRUB 和 Linux 进行分析。 查找、载入并执行操作系统内核通过 GRUB 可以选择内核，之后电脑就会载入并执行选择的操作系统内核。 运行启动脚本和系统守护进程内核加载完成后会运行初始化脚本，之后就会在用户空间创建自发进程。称之为自发进程是因为它是由内核自主启动的。其中一个自发进程就是系统管理守护进程，即 init。 init 的功能有很多，其首要任务是确保系统在任何时刻都运行正确的服务和守护进程。从引导到进入多用户模式的过程中，init 通常要做许多工作： 设置计算机名； 设置时区； 使用 fsck 检查磁盘； 挂载文件系统； 删除 /tmp 目录中的陈旧文件； 配置网络接口； 配置分组过滤器； 启动其他守护进程和网络服务。 Linux 中 init 的实现方式有传统 init 和 systemd。传统 init 缺少一个能够描述服务之间关系的通用模型，因而所有的启动脚本和卸载脚本都只能以串行方式运行，systemd 就解决了这个问题。 但在 Linux 圈子中，从 init 迁移到 systemd 是有史以来最激烈的一个争论，一些 Linux 发行版坚持永久保留传统 init，以示抗议。关于 systemd 的具体知识实在是有点复杂，在这里我先开个坑，之后会具体讲解。 维护进程卫生，管理系统状态变化参考资料：《 UNIX and Linux System Administration Handbook (5th Edition) 》"},{"title":"GRUB简介以及引导失败的解决方法","date":"2021-01-03T14:00:00.000Z","url":"/2021/01/03/11.GRUB%E7%AE%80%E4%BB%8B%E4%BB%A5%E5%8F%8A%E5%BC%95%E5%AF%BC%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/","tags":[["Linux","/tags/Linux/"],["引导","/tags/%E5%BC%95%E5%AF%BC/"]],"categories":[["undefined",""]],"content":"GRUB 的配置 grub 的配置文件为 /boot/grub/grub.cfg。 grub.cfg 文件可以手动创建，但是一般都是通过 grub-mkconfig 实用工具（Debian 中被包装为 update-grub ）来完成的。grub-mkconfig/update-grub 的配置文件为 /etc/default/grub。其中的一些常用选项如下： GRUB_BACKGROUND：背景图片（必须是.png、.tga、.jpg、.jpge）格式；GRUB_CMDLINE_LINUX：添加到菜单表项中的 Linux 内核参数；GRUB_DEFAULT：默认菜单项的编号或标题；GRUB_DISABLE_RECOVERY：不生成恢复模式菜单项；GRUB_PRELOAD_MODULES：需要尽早装载的 GRUB 模块列表；GRUB_TIMEOUT：引导菜单在自动引导前显示的时长（秒）。 如果想改变引导菜单中所列出的内核顺序、设置密码或修改引导菜单的名称，需要编辑 /etc/grub.d/40_custom 文件。 内核升级之后会自动重新生成 grub.cfg。 GRUB 命令行 GRUB 支持使用命令行在引导期间动态编辑配置文件。在出现 GRUB 引导画面时，按下 c 键进入命令行模式。 可以在命令行中引导没有出现在 grub.cfg 中的操作系统，显示系统信息，执行基本系统检测。 按下 Tab 键可以输出可用的命令列表。 这里列出一些常用的命令： Boot：用指定的内核镜像引导系统；Help：获取命令的交互式帮助；Linux：加载 Linux 内核；reboot：重新引导系统；search：通过文件、文件系统卷标或 UUID 搜索设备；usb：测试是否支持 USB。 Linux 内核选项可以利用内核启动选项修改内核参数、要求内核探测特定设备、指定 init 或 systemd 进程的路径、选择特定的跟设备： debug：开启内核调试；init=/bin/bash：只启动 bash shell，可用于紧急恢复；root=/dev/foo：告诉内核将 /dev/foo 作为根目录；single：引导进入单用户模式。 单用户模式单用户模式只启动了最小数量的进程、守护进程和服务。根文件系统会被挂载，但并不初始化网络。类似于 Windows 的安全启动模式。"},{"title":"Arch安装","date":"2020-12-27T14:00:00.000Z","url":"/2020/12/27/10.Arch%E5%AE%89%E8%A3%85/","tags":[["Linux","/tags/Linux/"],["Arch","/tags/Arch/"]],"categories":[["undefined",""]],"content":"写在前面安装了几次 Arch，每次都会遇到差不多一样的问题。由于之前都没有写过博客记录，所以每次都浪费了很多时间。于是写一次博客总结一下安装过程和一些问题的解决办法。 环境准备 清华镜像源下载镜像。 使用BalenaEtcher烧录镜像至U盘。 磁盘上空出一块分区。 U盘安装从U盘启动 Arch设置 tty 字体 联网 如果使用有线连接网络，则可执行以下命令获取IP地址： 如果使用无线网，依次执行以下命令： 更新系统时间 分区 查看当前分区设置： 创建一个引导分区（如果你的系统已经有EFI分区，无需执行这一步）： 执行以下命令进入fdisk操作环境，输入m查看帮助： 如果是一块全新的磁盘，输入g创建一个gpt分区表，否则跳过这一步。 输入n创建一个新的分区，选择起始扇区，结束扇区或分区大小。 输入p查看新建的分区。 输入t并选择新建的分区序号更改分区类型，输入l查看所有支持类型，输入ef更改分区的类型为EFI。 输入w写入磁盘。 输入以下命令格式化新建的引导分区： 创建根分区 执行以下命令进入fdisk操作环境： 输入n创建一个新的分区，选择起始扇区，结束扇区或分区大小。 输入p查看新建的分区。 输入w写入磁盘。 输入以下命令格式化新建的引导分区： 挂载分区依次执行以下指令将根分区和EFI分区挂在到/mnt和/mnt/boot： 选择镜像源修改镜像源配置文件： 将清华、浙大源添加到文件最前面位置： 安装基本 Archlinux 包到磁盘上 配置 Fstab生成自动挂载分区的Fstab文件： 操作磁盘上的 linux 系统 Chroot执行如下命令将操作权交给新安装的 ArchLinux 系统： 设置时区 设置时区为上海并生成相关文件： 同步 Windows 和 Linux 时间： 安装必须软件包 设置语言编码 设置语言选项： 在文件中找到zh_CN.UTF-8 UTF-8和en_US.UTF-8 UTF-8去掉前面的#。 执行以下命令： 打开/etc/locale.conf文件，在文件第一行加入以下内容： 设置主机名 打开/etc/hostname文件，并在第一行输入自己想设定的主机名。 编辑/etc/hosts文件，在文件末添加如下内容： 设置root密码 Intel CPU 安装 Intel-ucode 安装 Grub 安装所需依赖： 安装grub和efibootmgr： 部署grub： 生成配置文件： 重启 退出磁盘安装的 ArchLinux 系统： 卸载分区： 重启 必要的配置 联网 有线网络执行以下命令获取IP地址： 无线网络 方法一：使用wifimenu 方法二：使用nmcli 查看Wifi列表： 连接Wifi： 创建交换文件 执行以下命令分配一块空间用于交换文件： 更改权限： 设置交换文件： 启用交换文件： 为交换文件设置一个入口，编辑/etc/fstab，在最后一行加入如下内容： 新建用户 创建一个用户： 设置密码： 配置sudo： 编辑sudo配置文件： 找到如下语句去掉前面的 # ： 重启电脑。 "},{"title":"Linux命令查询","date":"2020-12-20T14:00:00.000Z","url":"/2020/12/20/9.Linux%E5%91%BD%E4%BB%A4%E6%9F%A5%E8%AF%A2/","tags":[["Linux","/tags/Linux/"]],"categories":[["undefined",""]],"content":"写在前面命令行是 Linux 的强大工具，但是将所有的命令和使用方法记住是不可能的，学会使用查询会使你的 Linux 使用事半功倍。 查询命令 helphelp 命令可以列出所有的内部指令。使用 help name 还可以查询命令的具体使用方法。 whichwhich name 命令可以查询二进制程序并搜索其路径。 whereiswhereis name 该命令和 which 一样，但是这个命令可以搜索除 shell 的搜索路径以外的更大范围的系统目录。 locatelocate 命令包含在 mlocate 软件包中，需要安装后才能使用。locate 就像 Windows 中的 everything 一样，非常好用，可以查找任何类型的文件，并不仅限于命令或者软件包。locate 的数据库由 cron 定期执行 updatedb 命令来更新，因此如果需要 locate 的执行结果反映出文件系统新近的变化或是第一次安装软件包后立即需要执行此命令，请手动执行 updatedb 命令。 "},{"title":"Clash实现局域网透明代理","date":"2020-12-13T14:00:00.000Z","url":"/2020/12/13/8.Clash%E5%AE%9E%E7%8E%B0%E5%B1%80%E5%9F%9F%E7%BD%91%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86/","tags":[["Linux","/tags/Linux/"],["Network","/tags/Network/"]],"categories":[["undefined",""]],"content":"写在前面之前没有折腾过软路由，现在手头刚好有一部几年前的旧电脑，想做一个旁路由用来透明代理。这里总结了折腾过程中遇到的一些问题。 准备事项 下载 Debian 镜像并安装。 安装所需工具包： 网卡设置 指定一个静态IP，方法如下： 重启网络服务： 查看当前网关： 查看网卡信息 开启IP转发： 使用如下命令验证： Clash配置 创建文件夹： 下载并解压 Clash： 64位使用以下命令： 32位使用以下命令： 给权限： 之后将自己的 Clash 配置文件复制在当前路径下，并注意以下几点： redir-port为 Clash 透明代理的端口，若没有请添加到文件首部并指定一个端口； 将allow-lan打开； 打开 DNS 功能，可以将以下内容复制在配置文件的代理设置之前： 由于 Clash 当前发行版的 Bug，Clash 无法自动下载Country.mmdb文件，请手动下载并将其添加到 Clash 解压路径中； 防火墙设置 添加 Clash 链： 允许使用 tcp 协议的访问通过 22 端口，否则将无法通过 ssh 连接你的 Linux： 将通过 Clash 的流量从透明代理端口转发，我的redir-port为7892，所以使用如下命令： 允许 Clash 流量通过出口： 永久保存 iptables 规则： 后台运行 前台运行测试是否可以正常运行： 将自己电脑的网关和DNS设为该 Linux 的IP，访问 Google 或 YouTube； 配置 supervisor把 Clash 放到后台运行： 写入以下配置： 启动 supervisor 并设置开机自启： 将主路由 DHCP 服务器的网关和 DNS 服务器设为该 Linux 旁路由。 "},{"title":"Markdown的简单使用","date":"2020-12-06T14:00:00.000Z","url":"/2020/12/06/7.Markdown%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/","tags":[["Code","/tags/Code/"]],"categories":[["undefined",""]],"content":"写在前面由于写博客的需求，我开始学习写 markdown，这里总结一些基础用法。 标题 一级标题：内容前加#： 二级标题：内容前加##： 依此类推，共有六级标题。 正文 加粗：加粗内容两端加**： 斜体：斜体内容两端加*： 加粗斜体：加粗斜体内容两端加***： 引用：引用内容前加&gt;： 删除线：删除内容两端加~~： 制表 无序列表：列表内容前加*或-： 有序列表：列表内容前加数字1. 2. 3.： 加框：加框内容两端加 ` ： 表格： -: 设置内容和标题栏右对齐。 :-: 设置内容和标题栏居中对齐。 :- 设置内容和标题栏左对齐。 长框：长框上下加```，后面可加代码类型自动高亮。 分割线：三个或以上的*或-。 图片 图片：!加[图片名称]加(图片网址) 链接 链接：[显示文字]加(链接网址) 邮箱：&lt;邮箱地址&gt; "},{"title":"免费无版权插画网站","date":"2020-11-29T14:00:00.000Z","url":"/2020/11/29/6.%E5%85%8D%E8%B4%B9%E6%97%A0%E7%89%88%E6%9D%83%E6%8F%92%E7%94%BB%E7%BD%91%E7%AB%99/","tags":[["资源","/tags/%E8%B5%84%E6%BA%90/"]],"categories":[["undefined",""]],"content":"写在前面开始学习做网页后，为了页面美观，经常需要插入一些插画。这里找到一些无版权可商用的高质量插画网站以便以后查找使用。      这篇博客将会持续更新。"},{"title":"搭建 Trojan","date":"2020-11-22T14:00:00.000Z","url":"/2020/11/22/5.Trojan/","tags":[["Linux","/tags/Linux/"],["Network","/tags/Network/"]],"categories":[["undefined",""]],"content":"本文简介 原文： 要求：Ubuntu 16.04+ / Debian 9+ / CentOS 7+ ，本文仅演示使用 apt 的包管理器。 购买一台VPS 国际比较有名的 VPS 厂商有： BandWaGon:  Vultr:  购买并解析域名购买一个域名并解析，地址为 VPS 的公网 IP 地址。 连接 VPS 如果有必要，重装 VPS 系统。 取得IP地址Public IP address和端口号SSH Port并记录密码。 Windows连接 VPS 需要下载 Xshell 或 PuTTY 。 以 Xshell 为例，File|New： Name随便写； Protocol默认SSH； Host填入IP地址； Port Number填入端口号。 点击确认，在弹出窗口中输入用户名和密码，用户名默认为root。若没有出现弹窗，说明 VPS 被墙。 命令行窗口显示： 说明连接成功。 环境准备 创建用户组certusers： 创建trojan和acme： 更新源： 安装 acme.sh 需要的依赖： 启动 crontab： 安装 Trojan 需要的依赖： 安装 Nginx： 配置 Nginx 关闭Nginx默认虚拟主机： 修改Nginx配置文件，&lt;tdom.ml&gt;改为自己的域名： 要修改的内容包括： 第4行的server_name的值&lt;tdom.ml&gt;改为你自己的域名； 第7行的proxy_pass随便指向一个没有敏感信息的网站，原文使用的是RFC文档的地址； 第15行的server_name的值&lt;10.10.10.10&gt;改为你自己的IP； 第17行&lt;tdom.ml&gt;改为自己的域名。 使能配置文件，&lt;tdom.ml&gt;改为自己域名： 启动 Nginx： 配置证书 新建一个文件夹用于存放证书： 将证书文件夹所有者改为acme，使得用户acme有权限写入证书： 运行下述命令查找nginx: worker process所属用户： 上述命令输出第二行第一列即为nginx: worker process所属用户，然后根据实际情况，运行下面三个命令之一： 新建一个文件夹用于给acme.sh存放域名验证文件： 将证书文件夹所有者改为acme，使得用户acme有权限写入文件，同时当验证的时候Nginx可以读取该文件： 安装acme.sh自动管理CA证书脚本，切换到用户acme安装acme.sh并重新登录： 申请证书： 安装证书，&lt;tdom.ml&gt;改为自己域名： 配置acme.sh自动更新和自动更新证书： 修改权限： 配置 Trojan 安装 Trojan： 修改权限，备份并修改配置文件： 修改password、cert和key。cert改为/etc/letsencrypt/live/certificate.crt，key改为/etc/letsencrypt/live/private.key。如果有IPv6地址，将local_addr的0.0.0.0改为::才可以使用。 执行如下命令，打开trojan.service文件，并将用户修改为trojan，等号旁边没有空格： 重新加载配置文件： 赋予Trojan监听443端口能力： 启动 Trojan 并查看状态： 给用户trojan添加定时任务，使其每个月检测更新一次证书： 编辑用户trojan的crontab文件： 在文件末尾添加一行如下： 执行以下命令更新 Trojan，中间全部回答”N”： 配置Trojan和Nginx开机自启： 启用 BBR 启动bbr需要Linux内核版本在4.10及以上，查看系统内核版本命令如下： 执行下面命令查看当前系统是否启用bbr： 执行完成之后如果提示net.ipv4.tcp_congestion_control = bbr即表示启动了bbr， 执行以下命令启动bbr，检查启动状态同上： 配置客户端 配置客户端所需的密码为自己设置的密码，端口为443。 Clash for Windows Netch TCS "},{"title":"一键脚本搭建WS+Tls+V2ray","date":"2020-11-15T14:00:00.000Z","url":"/2020/11/15/4.%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC%E6%90%AD%E5%BB%BAWs+Tls+V2ray/","tags":[["Linux","/tags/Linux/"],["Network","/tags/Network/"]],"categories":[["undefined",""]],"content":"购买一台VPS 国际比较出名的VPS厂商有：BandWaGon: :  连接 VPS ，安装 V2ray 如果有必要，重装 VPS 系统。 取得IP地址Public IP address和端口号SSH Port并记录密码。 Windows连接 VPS 需要下载 Xshell 或 PuTTY 。 以 Xshell 为例，File|New： Name随便写； Protocol默认SSH； Host填入IP地址； Port Number填入端口号。 点击确认，在弹出窗口中输入用户名和密码，用户名默认为root。若没有出现弹窗，说明 VPS 被墙。 命令行窗口显示： 说明连接成功。 安装V2ray：使用代码： 要求：Ubuntu 16+ / Debian 8+ / CentOS 7+ 系统，原文章地址： 233boy 。 若出现提示 curl: command not found，则需要安装装 Curl。 ubuntu/debian 系统安装 Curl 方法: centos 系统安装 Curl 方法: 配置 V2ray 传输协议选择 4. WebSocket + TLS ，需要域名； 自动配置 TLS ，开启 网络伪装 和 路径分流 ，伪装网站和分流路径默认就好； 端口使用五位数以上的以免冲突，一般默认就好； 不开启广告拦截； 无需配置Shadowsocks； 配置完成后保存配置信息，使用 V2ray 可以再次查看或更改配置。 安装 BBR 加速输入 V2ray ，选择 其他 ，安装 BBR。"},{"title":"apt 命令简介","date":"2020-11-08T14:00:00.000Z","url":"/2020/11/08/3.apt%E5%91%BD%E4%BB%A4%E7%AE%80%E4%BB%8B/","tags":[["Linux","/tags/Linux/"]],"categories":[["undefined",""]],"content":"安装 apt update：从镜像源更新软件库到本地仓库。 apt upgrade：更新已安装的软件。 **apt install [package]**：安装指定包及其依赖。 查询 apt list：列出本地仓库中所有的软件包名。 **apt list [keyword]**：在本地仓库中查找指定包，支持通配符。 **apt search [keyword]**：在本地仓库中查找指定包并列出其描述，支持通配符。 apt list –install：列出系统中所有已安装的包。 **apt show [package]**：列出指定包的详细情况。 清理 **apt remove [package]**：卸载包，包名支持通配符。 **apt purge [package]**：卸载包并删除相关配置文件，包名支持通配符。 apt autoremove：卸载不需要的依赖包。 apt clean：清除所有已下载的软件包。 "},{"title":"搭建Lnmp环境","date":"2020-11-01T14:00:00.000Z","url":"/2020/11/01/2.%E6%90%AD%E5%BB%BALnmp%E7%8E%AF%E5%A2%83/","tags":[["Linux","/tags/Linux/"],["Network","/tags/Network/"]],"categories":[["undefined",""]],"content":"写在前面 最近开始学习写网页，但是在 Windows 上搭建环境过于麻烦，集成环境又有各种各样的问题，而且以后搭建服务器肯定都是在 Linux 上。所以这里总结一下搭建网络服务器时遇到的一些问题，方便以后参考。 Lnmp = Linux + Nginx + MySQL + PHP 安装Nginx MySQL 打开网站 MySQL APT Respository -&gt; Download -&gt; 右键点击 No thanks, just start my download.复制链接。 打开 XShell 并新建目录存放 MySQL，使用wget指令下载deb文件： 使用dpkg指令添加该文件进apt-get的源（以自己下载的文件为准）： 弹窗之后选”OK”。 更新源： 安装 MySQL： 中途需要输入 root 密码。 PHP 7.2 更新源并安装必要的依赖： 使用curl命令导入存储库的GPG密钥： 将ondrej的存储库添加到系统的软件存储库列表中： 安装 PHP： 环境配置 配置 Nginx 运行 PHP 安装 php7.2-fpm： 查看 php7.2-fpm 服务状态： 编辑 Nginx 配置文件： 在服务器块最下方添加以下行： 安装 PHP MySQL拓展 常用指令Nginx 重启： 服务器块模板： 配置文件目录：/etc/.config/nginx.conf MySQL 连接： 查看所有数据库： 选中数据库： 删除数据库： 查看所有表： 查看表中所有内容： 新建表： 删除数据表： 插入行： 插入列： 到最后一列： 到指定列： 到第一列： "},{"title":"Debian 安装后的一些问题","date":"2020-10-25T14:00:00.000Z","url":"/2020/10/25/1.%E5%AE%89%E8%A3%85%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/","tags":[["Linux","/tags/Linux/"]],"categories":[["undefined",""]],"content":"写在前面我个人最常用的 Linux 发行版是 debian，因为我觉得它比 Ubuntu 更轻量更稳定更高效。因为每次装完系统都需要更换镜像源，还有其他乱七八糟的事情，所以把过程中的一些问题总结在这里。 apt 更换国内源 镜像源文件为： 国内常用镜像源： 更新源： public GPG key error (“NO_PUBKEY) "}]